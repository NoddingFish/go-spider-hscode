package old

import (
	"context"
	"fmt"
	"github.com/PuerkitoBio/goquery"
	"github.com/axgle/mahonia"
	"github.com/chromedp/chromedp"
	"io"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)

var baseUrl = "https://www.hsbianma.com/"
//var baseUrl = "https://www.hsbianma.com/Search/2?keywords=06"
var tableName = "hs_code"
var f *os.File
var id = 43170
var loginURL = "https://www.hsbianma.com/"

var appointProvince = "宁夏回族自治区"
var runProvince = false

var GarbledCode = false

var currentProvince = ""
var currentCity = ""
var currentCounty = ""
var currentTown = ""

func main() {
	fmt.Println(time.Second)
	GarbledCode = false
	GetSQL()
}

func GetSQL() {
	FindHierarchy1(baseUrl)

	//fmt.Println("数据已写入 " + tableName + ".sql 中，共: " + strconv.Itoa(id) + " 条数据")
}

//func OpenChrome() {
//	// chromdp依赖context上限传递参数
//	ctx, _ := chromedp.NewExecAllocator(
//		context.Background(),
//
//		// 以默认配置的数组为基础，覆写headless参数
//		// 当然也可以根据自己的需要进行修改，这个flag是浏览器的设置
//		append(
//			chromedp.DefaultExecAllocatorOptions[:],
//			chromedp.Flag("headless", false),
//		)...,
//	)
//
//	// 创建新的chromedp上下文对象，超时时间的设置不分先后
//	// 注意第二个返回的参数是cancel()，只是我省略了
//	ctx, _ = context.WithTimeout(ctx, 30*time.Second)
//	ctx, _ = chromedp.NewContext(
//		ctx,
//		// 设置日志方法
//		chromedp.WithLogf(log.Printf),
//	)
//	// 执行我们自定义的任务 - myTasks函数在第4步
//	if err := chromedp.Run(ctx, myTasks()); err != nil {
//		log.Fatal(err)
//		return
//	}
//}

//获取网站上爬取的数据
func getHttpHtmlContent(url string, selector string, sel interface{}) (string, error) {
	fmt.Println(time.Second)
	options := []chromedp.ExecAllocatorOption{
		chromedp.Flag("headless", true), // debug使用
		chromedp.Flag("blink-settings", "imagesEnabled=false"),
		chromedp.UserAgent(`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36`),
	}
	//初始化参数，先传一个空的数据
	options = append(chromedp.DefaultExecAllocatorOptions[:], options...)

	c, _ := chromedp.NewExecAllocator(context.Background(), options...)

	// create context
	chromeCtx, cancel := chromedp.NewContext(c, chromedp.WithLogf(log.Printf))
	// 执行一个空task, 用提前创建Chrome实例
	chromedp.Run(chromeCtx, make([]chromedp.Action, 0, 1)...)

	//创建一个上下文，超时时间为40s
	timeoutCtx, cancel := context.WithTimeout(chromeCtx, 60*time.Second)
	defer cancel()

	var htmlContent string
	err := chromedp.Run(timeoutCtx,
		chromedp.Navigate(url),
		chromedp.WaitVisible(selector),
		chromedp.OuterHTML(sel, &htmlContent, chromedp.ByJSPath),
	)
	if err != nil {
		fmt.Printf("Run err : %v\n", err)
		return "", err
	}
	//log.Println(htmlContent)

	return htmlContent, nil
}

// 自定义任务
func myTasks() chromedp.Tasks {
	return chromedp.Tasks{
		// 1. 打开金山文档的登陆界面
		chromedp.Navigate(loginURL),
	}
}

// 查找第一级
func FindHierarchy1(url string) {
	htmlContent, err := getHttpHtmlContent(baseUrl, "#tree1 > ul > li:nth-child(1) > div > span", `document.querySelector("body")`)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(htmlContent)
	return
	for _, v := range htmlContent {
		doc, err := goquery.NewDocumentFromReader(strings.NewReader(string(v)))
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(doc.Html())
		//EachWithBreak可以退出的循环遍历
		//doc.Find("tbody tr").EachWithBreak(func(i int, s *goquery.Selection) bool {
		//	earRes := GetEarlierRes()
		//	var res BallRes
		//	s.Find("td").Each(func(ii int, ss *goquery.Selection) {
		//		if ii == 0 {
		//			res.code = ss.Text()
		//		} else if ii == 1 {
		//			res.date = ss.Text()
		//		} else if ii == 2 {
		//			ss.Find("span").Each(func(iii int, sss *goquery.Selection) {
		//				if iii == 0 {
		//					res.r1, _ = strconv.Atoi(sss.Text())
		//				} else if iii == 1 {
		//					res.r2, _ = strconv.Atoi(sss.Text())
		//				} else if iii == 2 {
		//					res.r3, _ = strconv.Atoi(sss.Text())
		//				} else if iii == 3 {
		//					res.r4, _ = strconv.Atoi(sss.Text())
		//				} else if iii == 4 {
		//					res.r5, _ = strconv.Atoi(sss.Text())
		//				} else if iii == 5 {
		//					res.r6, _ = strconv.Atoi(sss.Text())
		//				}
		//			})
		//		} else if ii == 3 {
		//			res.b, _ = strconv.Atoi(ss.Text())
		//		}
		//	})
		//	return true
		//})
	}
}

// 查找城市
func FindCity(url string, parentId int) {
	doc, err := goquery.NewDocument(url)
	if err != nil {
		log.Fatal(err)
	}
	doc.Find(".citytr").Each(func(i int, tr *goquery.Selection) {
		//根据页面特点，有加粗<b>标签的是省级数据
		cityId := tr.Find("td").First().Find("a").Text()
		currentCity = tr.Find("td").Last().Find("a").Text()
		currentCity = UseNewEncoder(currentCity, "gbk", "utf-8")
		fmt.Println("城市：" + currentProvince + cityId + "  ==> " + currentCity)
		id = id + 1
		io.WriteString(f, "INSERT INTO "+tableName+"(`id`,`name`,`level`,`parent_id`) values("+strconv.Itoa(id)+",'"+currentCity+"',2,"+strconv.Itoa(parentId)+");\r\n")
		//time.Sleep(time.Second * 5)
		hrefUrl, res := tr.Find("td").First().Find("a").Attr("href")
		if res {
			handleUrl := handleUrl(url)
			FindCounty(handleUrl+hrefUrl, id)
		}
	})
}

// 查找区县
func FindCounty(url string, parentId int) {
	doc, err := goquery.NewDocument(url)
	if err != nil {
		log.Fatal(err)
	}
	doc.Find(".countytr").Each(func(i int, tr *goquery.Selection) {
		//根据页面特点，有加粗<b>标签的是省级数据
		countyId := tr.Find("td").First().Text()
		currentCounty = tr.Find("td").Last().Text()
		if countyId == "" {
			countyId = tr.Find("td").First().Find("a").Text()
			currentCounty = tr.Find("td").Last().Find("a").Text()
		}
		currentCounty = UseNewEncoder(currentCounty, "gbk", "utf-8")
		fmt.Println("区县：" + currentProvince + countyId + "  ==> " + currentCounty)
		id++
		io.WriteString(f, "INSERT INTO "+tableName+"(`id`,`name`,`level`,`parent_id`) values("+strconv.Itoa(id)+",'"+currentCounty+"',3,"+strconv.Itoa(parentId)+");\r\n")
		hrefUrl, res := tr.Find("td").First().Find("a").Attr("href")
		if res {
			handleUrl := handleUrl(url)
			FindTown(handleUrl+hrefUrl, id)
		}
	})

	if doc.Find(".countytr").Text() == "" {
		FindTown(url, parentId)
	}
}

// 查找镇/街道
func FindTown(url string, parentId int) {
	doc, err := goquery.NewDocument(url)
	if err != nil {
		log.Fatal(err)
	}
	doc.Find(".towntr").Each(func(i int, tr *goquery.Selection) {
		//根据页面特点，有加粗<b>标签的是省级数据
		townId := tr.Find("td").First().Text()
		currentTown = tr.Find("td").Last().Text()
		if townId == "" {
			townId = tr.Find("td").First().Find("a").Text()
			currentTown = tr.Find("td").Last().Find("a").Text()
		}
		currentTown = UseNewEncoder(currentTown, "gbk", "utf-8")
		fmt.Println("镇/街道：" + currentProvince + townId + "  ==> " + currentTown)
		id++
		io.WriteString(f, "INSERT INTO "+tableName+"(`id`,`name`,`level`,`parent_id`) values("+strconv.Itoa(id)+",'"+currentTown+"',4,"+strconv.Itoa(parentId)+");\r\n")
		//hrefUrl, res := tr.Find("td").First().Find("a").Attr("href")
		//if res {
		//	handleUrl := handleUrl(url)
		//	FindVillage(handleUrl+hrefUrl, id)
		//}
	})
}

// 查找社区/村
func FindVillage(url string, parentId int) {
	doc, err := goquery.NewDocument(url)
	if err != nil {
		log.Fatal(err)
	}
	doc.Find(".villagetr").Each(func(i int, tr *goquery.Selection) {
		//根据页面特点，有加粗<b>标签的是省级数据
		villageId := tr.Find("td").First().Text()
		villageName := tr.Find("td").Last().Text()
		if villageId == "" {
			villageId = tr.Find("td").First().Find("a").Text()
			villageName = tr.Find("td").Last().Find("a").Text()
		}
		villageName = UseNewEncoder(villageName, "gbk", "utf-8")
		fmt.Println("社区/村：" + currentProvince + villageId + "  ==> " + villageName)
		id++
		io.WriteString(f, "INSERT INTO "+tableName+"(`id`,`name`,`level`,`parent_id`) values("+strconv.Itoa(id)+",'"+villageName+"',5,"+strconv.Itoa(parentId)+");\r\n")
	})
}

func handleUrl(url string) string {
	reg := regexp.MustCompile("[a-z0-9]+.html")
	url = reg.ReplaceAllString(url, "")
	fmt.Println("地址：" + url)
	return url
}

func UseNewEncoder(src string, oldEncoder string, newEncoder string) string {
	if !GarbledCode {
		return src
	}
	srcDecoder := mahonia.NewDecoder(oldEncoder)
	desDecoder := mahonia.NewDecoder(newEncoder)
	resStr := srcDecoder.ConvertString(src)
	fmt.Println("==" + resStr)
	_, resBytes, _ := desDecoder.Translate([]byte(resStr), true)
	return string(resBytes)
}
